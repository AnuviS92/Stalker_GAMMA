// Screen Space Shaders - Water File
// Update 6 [ 2022/05/23 ]

#include "common.h"
#include "anomaly_shaders.h"
#include "reflections.h"
#include "lmodel.h"

// Screen space functions
#include "screenspace_water.h"

struct   vf
{
	float2	tbase		: TEXCOORD0;	// base
	float4	tnorm0		: TEXCOORD1;	// nm0
	float3	position_w	: TEXCOORD2;	// nm1
	float3	M1			: TEXCOORD3;
	float3	M2			: TEXCOORD4;
	float3	M3			: TEXCOORD5;
	float3	v2point_w	: TEXCOORD6;
	float4	tctexgen	: TEXCOORD7;	
	float4	c0			: COLOR0;
	float	fog			: FOG;
	float4	hpos		: SV_Position;
};

Texture2D	s_nmap;

Texture2D	s_shadows;
Texture2D 	s_bluenoise;
Texture2D	s_rainsplash;
texture2D 	s_watercaustics;

float3	water_intensity; // Unused?

float4 main( vf I) : SV_Target
{
	// Normal Textures
	float3	n0	= s_nmap.Sample( smp_base, I.tnorm0.xy);
	float3	n1	= s_nmap.Sample( smp_base, I.tnorm0.zw);
	float3	basenormal	= (((n0 * 2 - 1) + (n1 * 2 - 1)) / 2.0f);
	basenormal += float3(0.1f,0.1f,0.1f); // Offset the normal to "center" the textures again
	
	// Load Data
	float2 PosTc = I.tctexgen.xy / I.tctexgen.z;
	gbuffer_data gbd = gbuffer_load_data( PosTc, I.hpos.xy );
	float4 _P = 	float4( gbd.P, 1.0f );
	
	// Trick to check if rain can fall on the water, gloss include the rain_apply_gloss
	float rain_cover = step(0.035f * (-0.4f + rain_params.x), gbd.gloss - 0.04f );
	
	// Rain intensity. Fadeout and rain cover
	float RainInt = clamp( rain_cover * rain_params.x, 0, G_SSR_WATER_RAIN ) * (1 - smoothstep(20, 30, _P.z));
	
	// Ripples normal
	basenormal += lerp(float3(0, 0, 1), SSFX_ripples( s_rainsplash, I.tbase ) * 2.0f - 1.0f, RainInt);
	
	// Water wave intensity
	float3 Navg = normalize(float3(basenormal.x * G_SSR_WATER_WAVES, basenormal.y * G_SSR_WATER_WAVES, basenormal.z));
		
	// Shadow normal
	float3 ShwN = normalize(float3(basenormal.x * 0.7f, basenormal.y * 0.7f, basenormal.z));
	
	// Shadows to do some tricks
#ifndef USE_MSAA
	float water_shadows = saturate(s_accumulator.Sample(smp_nofilter, PosTc + ShwN).r * 2000);
#else
	float water_shadows = saturate(s_accumulator.Load(int3((PosTc + ShwN) * screen_res.xy, 0), 0).r * 2000);
#endif

	float3	Nw	= mul (float3x3(I.M1, I.M2, I.M3), Navg);
			Nw	= normalize (Nw);
	
	float3 v2point	= normalize (I.v2point_w);
	float3 vreflect = reflect(normalize(v2point), normalize(Nw.xyz));

	// 3d view space pos reconstruction math using object space
	float3 Pv = float3(I.tctexgen.z * (I.hpos.xy * pos_decompression_params.zw - pos_decompression_params.xy), I.tctexgen.z);
	
	float3 eyedir = normalize(Pv);
	float3 Nv = normalize(mul(m_V, Nw));
	
	// Some vars to put our reflection
	float3 refl_ray, refl_sky;	
	float3 Reflection;
	float3 hit_uv = 0.0f;
	
	// Blue Noise
	float blue_noise = s_bluenoise.Sample(smp_linear, I.tbase * float2(0.1f, 0.1f)).b * 2.0f;
	
	// Fades ( Calc first, to discard pixels )
	float edgeFade = (1.0f - pow(length( PosTc - 0.5f ) * 2.0f, 2.0f));

	// Trace a ray, z return 0 = sky ~ 1 = other
	if (edgeFade > 0.07f)
		hit_uv = SSFX_ssr_water_ray(Pv, reflect(eyedir, Nv), blue_noise, 0);
	
	
#ifdef NEED_REFLECTIONS
	// Let's mix a little the sky and fog to have a "better" result...
	refl_sky = lerp(SSFX_calc_sky(vreflect), fog_color, 0.5f);
	
	// Use darker fog to fall back if inside a shadow.
	refl_sky = lerp(fog_color * 0.6f, refl_sky, saturate(water_shadows + (1.0 - G_SSR_WATER_SHADOWS)));
#else
	refl_sky = fog_color;
#endif
	
	if (all(hit_uv.xy))
	{
		// Get reflection pixel from scene screen
		refl_ray = s_image.Sample(smp_nofilter, hit_uv.xy).rgb;
		
		// Adjust reflection intensity using hit_uv.y and edgeFade
		float ray_fade = hit_uv.y * 2.0f;
		float refl_power = saturate(ray_fade * edgeFade);
		
		// 0 = sky | 1 = other
		hit_uv.z *= refl_power;
		
		// Select refl_sky or real reflection 
		Reflection = lerp(refl_sky, refl_ray, hit_uv.z);
	}
	else
	{
		// No reflection data, we use pure refl_sky
		hit_uv.z = 0.0f;
		Reflection = refl_sky;
	}
	
	// Base texture
	float4 base = s_base.Sample( smp_base, I.tbase + normalize(float3(basenormal.x * G_SSR_WATER_TEX_DISTORTION, basenormal.y * G_SSR_WATER_TEX_DISTORTION, basenormal.z)));
	
	// Water Depth
	float waterDepth = saturate( _P.z - I.tctexgen.z );
	
	// Texture * base color
	base.rgb *= I.c0.xyz;
	
	// Fresnel
#ifndef G_SSR_WATER_CHEAPFRESNEL
	float fresnel 		= SSFX_calc_fresnel(eyedir, Nv, 1.33f); 
	float refl_amount 	= saturate(fresnel);
#else
	float fresnel 		= saturate (dot(vreflect, v2point));
	float refl_amount 	= pow(fresnel, 9.0);
#endif

	// Let's start the accumulation... First reflection.
	float3 final = lerp(base, Reflection, refl_amount * G_SSR_WATER_REFLECTION);

	// Cheap Caustics
	float3 Ca0 = s_watercaustics.Sample(smp_base, I.tbase * 2.5f + float2( timers.x * 0.1f, 0.0f) );
	float3 Ca1 = s_watercaustics.Sample(smp_base, I.tbase * 1.5f + float2(-timers.x * 0.07f, 0.2f) );
	float3 CA = min(Ca0, Ca1) * water_shadows; // Caustics if light hit the water
	
	// Fake refraction
	float3 screen = s_image.Sample(smp_nofilter, PosTc + normalize(float3(basenormal.x * G_SSR_WATER_REFRACTION, basenormal.y * G_SSR_WATER_REFRACTION, basenormal.z))).rgb;
	final = lerp(final, screen + (CA * G_SSR_WATER_CAUSTICS), smoothstep( 0.5f, 1.0, 1.0f - waterDepth));
	
	// Specular
#ifdef NEED_SPECULARS
	float3 Nf = normalize(float3(Nw.x, Nw.y * 0.2f, Nw.z)); // flatten the water normal to get better specular for ripples
    float3 spec = L_sun_color.rgb * pow(abs(dot(normalize(v2point + L_sun_dir_w), Nf)), 500.f) * G_SSR_WATER_SPECULAR;
	final += spec * water_shadows;
#endif
		
	// Fogging
	final = lerp(fog_color, final, I.fog);	
	
	// Soft border
	float border_alpha = smoothstep( 0.0f , G_SSR_WATER_SOFTBORDER, waterDepth);
	
	// Done
	return  float4(final, I.fog * I.fog * border_alpha);
}